此题还可以用动态规划Dynamic Programming来解，根Palindrome Partitioning II 拆分回文串之二的解法很类似，我们维护一个二维数组dp，其中dp[i][j]表示字符串区间[i, j]是否为回文串，当i = j时，只有一个字符，肯定是回文串，如果i = j + 1，说明是相邻字符，此时需要判断s[i]是否等于s[j]，如果i和j不相邻，即i - j >= 2时，除了判断s[i]和s[j]相等之外，dp[j + 1][i - 1]若为真，就是回文串，通过以上分析，可以写出递推式如下：

dp[i, j] = 1                                               if i == j

           = s[i] == s[j]                                if j = i + 1

           = s[i] == s[j] && dp[i + 1][j - 1]    if j > i + 1      

这里有个有趣的现象就是如果我把下面的代码中的二维数组由int改为vector<vector<int> >后，就会超时，这说明int型的二维数组访问执行速度完爆std的vector啊，所以以后尽可能的还是用最原始的数据类型吧。

复制代码
// DP
class Solution {
public:
    string longestPalindrome(string s) {
        int dp[s.size()][s.size()] = {0}, left = 0, right = 0, len = 0;
        for (int i = 0; i < s.size(); ++i) {
            for (int j = 0; j < i; ++j) {
                dp[j][i] = (s[i] == s[j] && (i - j < 2 || dp[j + 1][i - 1]));
                printf("j: %d, i:%d, dp[%d][%d] = %d, dp[%d][%d] = %d\n,", j, i, j, i, dp[j][i], j+1, i-1, dp[j+1][i-1]);
                if (dp[j][i] && len < i - j + 1) {
                    len = i - j + 1;
                    left = j;
                    right = i;
                }
            }
            dp[i][i] = 1;
        }
        return s.substr(left, right - left + 1);
    }
};
复制代码


note:
矩阵的样子: dp[j + 1][i - 1]是dp[j][i]的左下


      **** -i-> *** 
      a  b  a  d  c
 *  a 1  0  1  0  0
 *  
 |  b 0  
 j  
 |  a
\/  
 *  d
 *  
 *  c
 
但是构筑的顺序是 i:0-size, j:0-i
       **** -i-> *** 
      a  b  a  d  c
 *  a 1  2  4  7  11
 *  
 |  b    3  5  8  12
 j  
 |  a       6  9  13
\/  
 *  d          10 14
 *  
 *  c             15
 
 j: 0, i:1, dp[0][1] = 0, dp[1][0] = 0
,j: 0, i:2, dp[0][2] = 1, dp[1][1] = 1
,j: 1, i:2, dp[1][2] = 0, dp[2][1] = 0
,j: 0, i:3, dp[0][3] = 0, dp[1][2] = 0
,j: 1, i:3, dp[1][3] = 0, dp[2][2] = 1
,j: 2, i:3, dp[2][3] = 0, dp[3][2] = 0
,j: 0, i:4, dp[0][4] = 0, dp[1][3] = 0
,j: 1, i:4, dp[1][4] = 0, dp[2][3] = 0
,j: 2, i:4, dp[2][4] = 0, dp[3][3] = 1
,j: 3, i:4, dp[3][4] = 0, dp[4][3] = 0